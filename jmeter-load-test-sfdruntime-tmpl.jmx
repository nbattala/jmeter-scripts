<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="load-test-sas-detection" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="client_id" elementType="Argument">
            <stringProp name="Argument.name">client_id</stringProp>
            <stringProp name="Argument.value">${__property(client_id)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Oauth Client ID</stringProp>
          </elementProp>
          <elementProp name="client_secret" elementType="Argument">
            <stringProp name="Argument.name">client_secret</stringProp>
            <stringProp name="Argument.value">${__property(client_secret)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Oauth Client Secret</stringProp>
          </elementProp>
          <elementProp name="grant_type" elementType="Argument">
            <stringProp name="Argument.name">grant_type</stringProp>
            <stringProp name="Argument.value">${__property(grant_type,password)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Oauth Grant Type</stringProp>
          </elementProp>
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">${__property(username,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">SAS Viya username allowed to talk to SFD runtime</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">${__property(password,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Password of SAS Viya username allowed to talk to SFD runtime</stringProp>
          </elementProp>
          <elementProp name="scope" elementType="Argument">
            <stringProp name="Argument.name">scope</stringProp>
            <stringProp name="Argument.value">${__property(scope,openid,*)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Oauth Scope</stringProp>
          </elementProp>
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__property(host,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">SAS Viya ingress hostname</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__property(port,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">SAS Viya ingress port</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">${__property(protocol,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">SAS Viya ingress protocol</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Load Test Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="step1_start_tps" elementType="Argument">
            <stringProp name="Argument.name">step1_start_tps</stringProp>
            <stringProp name="Argument.value">${__property(step1_start_tps,1)}</stringProp>
            <stringProp name="Argument.desc">step1 start TPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step1_end_tps" elementType="Argument">
            <stringProp name="Argument.name">step1_end_tps</stringProp>
            <stringProp name="Argument.value">${__property(step1_end_tps,250)}</stringProp>
            <stringProp name="Argument.desc">step1 end TPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step1_duration" elementType="Argument">
            <stringProp name="Argument.name">step1_duration</stringProp>
            <stringProp name="Argument.value">${__property(step1_duration,120)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">step1 duration in seconds</stringProp>
          </elementProp>
          <elementProp name="step2_start_tps" elementType="Argument">
            <stringProp name="Argument.name">step2_start_tps</stringProp>
            <stringProp name="Argument.value">${__property(step2_start_tps,250)}</stringProp>
            <stringProp name="Argument.desc">step2 start TPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step2_end_tps" elementType="Argument">
            <stringProp name="Argument.name">step2_end_tps</stringProp>
            <stringProp name="Argument.value">${__property(step2_end_tps,500)}</stringProp>
            <stringProp name="Argument.desc">step2 end TPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step2_duration" elementType="Argument">
            <stringProp name="Argument.name">step2_duration</stringProp>
            <stringProp name="Argument.value">${__property(step2_duration,120)}</stringProp>
            <stringProp name="Argument.desc">step2 duration in seconds</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step3_start_tps" elementType="Argument">
            <stringProp name="Argument.name">step3_start_tps</stringProp>
            <stringProp name="Argument.value">${__property(step3_start_tps,500)}</stringProp>
            <stringProp name="Argument.desc">step3 start TPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step3_end_tps" elementType="Argument">
            <stringProp name="Argument.name">step3_end_tps</stringProp>
            <stringProp name="Argument.value">${__property(step3_end_tps,1000)}</stringProp>
            <stringProp name="Argument.desc">step3 end TPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step3_duration" elementType="Argument">
            <stringProp name="Argument.name">step3_duration</stringProp>
            <stringProp name="Argument.value">${__property(step3_duration,120)}</stringProp>
            <stringProp name="Argument.desc">step3 duration in seconds</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step4_start_tps" elementType="Argument">
            <stringProp name="Argument.name">step4_start_tps</stringProp>
            <stringProp name="Argument.value">${__property(step4_start_tps,1000)}</stringProp>
            <stringProp name="Argument.desc">step4 start TPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step4_end_tps" elementType="Argument">
            <stringProp name="Argument.name">step4_end_tps</stringProp>
            <stringProp name="Argument.value">${__property(step4_end_tps,1000)}</stringProp>
            <stringProp name="Argument.desc">step4 end TPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step4_duration" elementType="Argument">
            <stringProp name="Argument.name">step4_duration</stringProp>
            <stringProp name="Argument.value">${__property(step4_duration,240)}</stringProp>
            <stringProp name="Argument.desc">step4 duration in seconds</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step5_start_tps" elementType="Argument">
            <stringProp name="Argument.name">step5_start_tps</stringProp>
            <stringProp name="Argument.value">${__property(step5_start_tps,1000)}</stringProp>
            <stringProp name="Argument.desc">step5 start TPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step5_end_tps" elementType="Argument">
            <stringProp name="Argument.name">step5_end_tps</stringProp>
            <stringProp name="Argument.value">${__property(step5_end_tps,500)}</stringProp>
            <stringProp name="Argument.desc">step5 end TPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step5_duration" elementType="Argument">
            <stringProp name="Argument.name">step5_duration</stringProp>
            <stringProp name="Argument.value">${__property(step5_duration,60)}</stringProp>
            <stringProp name="Argument.desc">step5 duration in seconds</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step6_start_tps" elementType="Argument">
            <stringProp name="Argument.name">step6_start_tps</stringProp>
            <stringProp name="Argument.value">${__property(step6_start_tps,500)}</stringProp>
            <stringProp name="Argument.desc">step6 start TPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step6_end_tps" elementType="Argument">
            <stringProp name="Argument.name">step6_end_tps</stringProp>
            <stringProp name="Argument.value">${__property(step6_end_tps,0)}</stringProp>
            <stringProp name="Argument.desc">step6 end TPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="step6_duration" elementType="Argument">
            <stringProp name="Argument.name">step6_duration</stringProp>
            <stringProp name="Argument.value">${__property(step6_duration,60)}</stringProp>
            <stringProp name="Argument.desc">step6 duration in seconds</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get Oauth Token" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request Get Access Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${client_id}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${client_secret}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${grant_type}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${username}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${scope}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/SASLogon/oauth/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">60000</stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="TestPlan.comments">Extract OAuth Token</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">no value</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="TestPlan.comments">set access_token variable (from https response) in access_token property to be passed to next thread group because variables cannot be passed</stringProp>
            <stringProp name="BeanShellAssertion.query">${__setProperty(access_token,${access_token})}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="bzm - Concurrency Thread Group" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="TestPlan.comments">send transactions concurrentl</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${__tstFeedback(MyThroughputShapingTimer,1,250,10)}</stringProp>
        <stringProp name="RampUp"></stringProp>
        <stringProp name="Steps"></stringProp>
        <stringProp name="Hold">60</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request Send Transaction" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/detection/decision/execute</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Send a transaction to sas-detection</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(access_token)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="TestPlan.comments"> Randomize Acct and Card numbers</stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def body =&apos;{SMH:{smh_msg_version:&quot;06.01.00&quot;,smh_tran_type:&quot;TRX&quot;,smh_schema:&quot;Cards&quot;,smh_cust_type:&quot;I&quot;,smh_acct_type:&quot;CC&quot;,smh_authenticate_mtd:&quot;CD&quot;,smh_channel_type:&quot;C&quot;,smh_activity_type:&quot;CA&quot;,smh_activity_detail1:&quot;DMX&quot;,smh_activity_detail2:&quot;DUA&quot;,smh_activity_detail3:&quot;NAP&quot;,smh_client_tran_type:&quot;1829202174&quot;,smh_priority:&quot;1&quot;,smh_resp_req:&quot;1&quot;,smh_sdd_ind:&quot;1&quot;,smh_source:&quot;Eclipse&quot;,smh_dest:&quot;TEST&quot;,smh_multi_org_name:&quot;AF_PC_CR&quot;},RRR:{rrr_service:&quot;0110&quot;,rrr_action_info:&quot;6000&quot;},RQO:{rqo_tran_date:2022-06-11,rqo_tran_time:0001-01-01T15:30:10.0Z,rqo_tran_utc_flag:&quot;N&quot;,rqo_tran_date_alt:2022-06-11,rqo_tran_time_alt:0001-01-01T15:30:10.0Z,rqo_tran_date_client:2022-06-11,rqo_tran_time_client:0001-01-01T15:30:10.0Z},XQO:{xqo_cust_num:&quot;123456789&quot;,xqo_cust_rand_dig:0,xqo_sas_cust_rand_dig:0,xqo_cust_type:&quot;B&quot;},AQO:{aqo_acct_num:&quot;myacctnum&quot;,aqo_branch_id:&quot;581107008&quot;,aqo_acct_post_code:&quot;01841&quot;,aqo_acct_cntry_code:&quot;840&quot;,aqo_port_hier_1:&quot;DUAL&quot;,aqo_port_hier_2:&quot;CONS&quot;},AQC:{},UCM:{ucm_card_present:&quot;0&quot;,ucm_term_pan_entry_cap:&quot;0&quot;,ucm_pos:&quot;00&quot;,ucm_cust_present:&quot;0&quot;,ucm_msg_exp_date:2022-06-11,ucm_scheme:&quot;9&quot;},HQO:{hqo_card_num:&quot;mycardnum&quot;,hqo_entity_use_card:&quot;H&quot;,hqo_pb_userid:&quot;123123&quot;,hqo_limit_amt:9900000e0,hqo_msg_type:&quot;card&quot;},HCT:{hct_card_purpose:&quot;M&quot;,hct_ch_post_code:&quot;1&quot;,hct_ch_cntry_code:&quot;840&quot;,hct_media:&quot;0&quot;,hct_which_card:&quot;1&quot;,hct_onus_flag:&quot;1&quot;,hct_xmit_datetime:&quot;20220611153010&quot;,hct_term_owner_id:&quot;1&quot;,hct_mer_mcc:&quot;6011&quot;,hct_term_id:&quot;1&quot;,hct_term_owner_name:&quot;IamHctTermOwnerName&quot;,hct_term_city:&quot;San Diego&quot;,hct_term_state:&quot;CA&quot;,hct_term_cntry_code:&quot;840&quot;,hct_term_owner_name_lcl:&quot;San LCL&quot;,hct_acq_id:&quot;12345678910&quot;},TCA:{tca_merch_amt:4.2e0,tca_merch_curr_code:&quot;764&quot;,tca_client_amt:4.2e0,tca_client_curr_code:&quot;764&quot;,tca_mod_amt:4.2e0,tca_client_tran_type:&quot;10&quot;,tca_auth_sys_dec:&quot;1&quot;,tca_auth_sys_info:&quot;6000&quot;,tca_reversal_ind:&quot;N&quot;},DMX:{dmx_n3_01:31,dmx_n3_03:33,dmx_n8_01:81,dmx_n8_02:82,dmx_n8_03:83,dmx_n22_01_tag:&quot;22&quot;,dmx_n22_01:10e0,dmx_n22_02:0e0,dmx_3byte_string_02:&quot;RDB&quot;,dmx_5byte_string_01_tag:&quot;MT&quot;,dmx_5byte_string_01:&quot;99999&quot;,dmx_10byte_string_01:&quot;dmx10_01&quot;},RUR:{rur_numeric_001:45.01e0,rur_numeric_002:0e0,rur_8byte_string_002:&quot;rur8_002&quot;}}&apos;

Integer randomNum = Math.abs(new Random().nextInt() % 1000000000) + 1
body = body.replaceAll(&apos;myacctnum&apos;, &quot;000000&quot; + randomNum.toString())
body = body.replaceAll(&apos;mycardnum&apos;, &quot;000000&quot; + randomNum.toString())
sampler.getArguments().removeAllArguments()
sampler.addNonEncodedArgument(&apos;&apos;,body,&apos;&apos;)
sampler.setPostBodyRaw(true)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="MyThroughputShapingTimer" enabled="true">
            <stringProp name="TestPlan.comments">Send transactions at a set TPS</stringProp>
            <collectionProp name="load_profile">
              <collectionProp name="-771577845">
                <stringProp name="1141012500">${step1_start_tps}</stringProp>
                <stringProp name="-899547269">${step1_end_tps}</stringProp>
                <stringProp name="-1396741416">${step1_duration}</stringProp>
              </collectionProp>
              <collectionProp name="-932535519">
                <stringProp name="1270095219">${step2_start_tps}</stringProp>
                <stringProp name="-1096060774">${step2_end_tps}</stringProp>
                <stringProp name="1101274521">${step2_duration}</stringProp>
              </collectionProp>
              <collectionProp name="-971372742">
                <stringProp name="1399177938">${step3_start_tps}</stringProp>
                <stringProp name="-1292574279">${step3_end_tps}</stringProp>
                <stringProp name="-695676838">${step3_duration}</stringProp>
              </collectionProp>
              <collectionProp name="2054781505">
                <stringProp name="1528260657">${step4_start_tps}</stringProp>
                <stringProp name="-1489087784">${step4_end_tps}</stringProp>
                <stringProp name="1802339099">${step4_duration}</stringProp>
              </collectionProp>
              <collectionProp name="-1671832617">
                <stringProp name="1657343376">${step5_start_tps}</stringProp>
                <stringProp name="-1685601289">${step5_end_tps}</stringProp>
                <stringProp name="5387740">${step5_duration}</stringProp>
              </collectionProp>
              <collectionProp name="1940588173">
                <stringProp name="1786426095">${step6_start_tps}</stringProp>
                <stringProp name="-1882114794">${step6_end_tps}</stringProp>
                <stringProp name="-1791563619">${step6_duration}</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
          <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <longProp name="interval_grouping">500</longProp>
            <boolProp name="graph_aggregated">false</boolProp>
            <stringProp name="include_sample_labels"></stringProp>
            <stringProp name="exclude_sample_labels"></stringProp>
            <stringProp name="start_offset"></stringProp>
            <stringProp name="end_offset"></stringProp>
            <boolProp name="include_checkbox_state">false</boolProp>
            <boolProp name="exclude_checkbox_state">false</boolProp>
          </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
          <hashTree/>
          <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <longProp name="interval_grouping">1000</longProp>
            <boolProp name="graph_aggregated">false</boolProp>
            <stringProp name="include_sample_labels"></stringProp>
            <stringProp name="exclude_sample_labels"></stringProp>
            <stringProp name="start_offset"></stringProp>
            <stringProp name="end_offset"></stringProp>
            <boolProp name="include_checkbox_state">false</boolProp>
            <boolProp name="exclude_checkbox_state">false</boolProp>
          </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
          <hashTree/>
          <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <longProp name="interval_grouping">500</longProp>
            <boolProp name="graph_aggregated">false</boolProp>
            <stringProp name="include_sample_labels"></stringProp>
            <stringProp name="exclude_sample_labels"></stringProp>
            <stringProp name="start_offset"></stringProp>
            <stringProp name="end_offset"></stringProp>
            <boolProp name="include_checkbox_state">false</boolProp>
            <boolProp name="exclude_checkbox_state">false</boolProp>
          </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
